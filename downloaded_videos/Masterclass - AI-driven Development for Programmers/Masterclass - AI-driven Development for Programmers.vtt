WEBVTT

1
00:00:00.000 --> 00:00:01.910
[en]Nobel prize winning Economist Paul  Krugman made an ominous prediction  recently saying AI like chat GPT won't  change the world anytime soon the reason  this is terrifying is that he's the same  guy who also predicted in the 1990s that  the internet was about as game changing  as a fax machine when it comes to  programming I've already seen enough the  need to memorize syntax for programming  is done the future is deterministic AI  pseudocode and the future is now uh  ladies and gentlemen if you will look  right here today's video is yet another  react.js tutorial just one of Millions  on the internet but it's no ordinary  tutorial it's the first tutorial to  leverage the full power of AI to write  code like a 10x developer even if you've  never written a single line of code in  your life what's crazy though is that  this tutorial can be applied to any  language or framework once you know some  basic programming principles and how to  prompt like a pro you can build almost  anything in your imagination but it's  not as simple as just asking chatgpt to  build you a react app you will need some  domain knowledge and understand how to  execute and validate the code that the  AI spits out let's go ahead and get  started with your AI printing  masterclass I'm assuming you know  nothing about react other than it's a  library for building uis I could sit  here and teach you about react and ask  you to buy my 500 react course but the  truth is that gpt4 can teach you better  than I can I hate to admit it but it's  true if you want to learn something you  know absolutely nothing about go ahead  and prompt it to explain it like you're  five in this case it'll explain how  react.js components are like Lego bricks  but for building websites which is the  perfect metaphor from there I ask it for  the most important Concepts that I  should know it then explains components  State and props and hooks if there's  anything you don't understand here you  can then prompt it to explain that one  thing in more detail or explain that to  you like your five one problem though is  that llms tend to hallucinate AKA makes  stuff up so as of today it's not really  a replacement for the react.js  documentation which is excellent by the  way however chat EBT has a browser  plugin that's on a waitlist right now  which will eventually solve that  hallucination problem so the react.js  docs are like the Bible and chatgpt is  like a priest who makes all the money  but sometimes invents his own ideas now  once you have a general idea about the  language or framework that you're trying  to build with the next step is to set up  a project that allows you to inject AI  code in a safe and effective way there's  an old programming proverb that says if  code is not tested it doesn't work and  that's especially true when working with  an AI that acts like it's tripping bowls  I'm freaking out man as someone who's  done a lot of react development I'm just  going to do it the old-fashioned way and  set the project up the way I want it  manually but doing things like this is  very 2022. like yesterday on Twitter I  saw this guy set up and build a project  entirely from voice commands and then  deploy it to versel  which means it did in fact deploy dude  it did it it nailed the background no  way I'm using vs code for Microsoft as  my editor it's not available today but  GitHub copilot X is coming a plug-in for  vs code that brings chat EPT directly  into your editor make sure you're  subscribed for the latest updates on  that tool the only other tool you'll  need is chat EPT ideally with gpt4 which  is currently paid but 3.5 will work as  well here I have vs code open to my  terminal with node.js installed in the  future we'll have tools like GitHub  copilot CLI that can find and explain  commands for us but for now I'm just  going to initialize a new react project  with VJs we'll go ahead and use  typescript because I have some  typescript tricks to show you and then  once inside that project we'll go ahead  and install another tool called  playwright for end-to-end testing in the  browser When developing an app testing  is technically not required but it's  extremely important when working with AI  because we need to validate that it does  what it's supposed to the good news  though is that AI can write its own test  as we'll see shortly now the main  component in the source directory is in  the app.tsx file let's go ahead and  prompt chatgpt to replace it with a more  basic hello world gpt4 is kind of slow  and can often be overly verbose so one  thing you can do is just say code only  to shorten the response that looks  pretty good let's copy and paste it into  our project now go to the terminal and  run npm run Dev and you should get this  hello world component but that's a  little too simple let's go back to chat  EPT and now have it modify this code  with a button that will toggle the  visibility of the hello world text when  doing that it explains how we'll need to  use react state to manage the visibility  paste the updated code into your project  save it and now you have a working  interactive react app that's pretty cool  but we want to make sure that the AI  doesn't accidentally break this code in  the future so let's ask it to write a  test with playwright once again copy the  code then go into the test directory and  create a new file called app.test.ts  here's a pro tip as a printing engineer  you can use control V on your keyboard  instead of doing right click paste to  maximize your speed now from there we  need to go into the package Json file  and set up a testing script if you  already have copilot installed you can  just type test and it should  automatically detect playwright and  create the script for you which is just  playwright test from there we can open  the terminal run npm run test and  playwright will test this code on  multiple browsers in parallel as you can  see it fails because we don't have the  right localhost Port set up so let's go  ahead and modify that in our testing  code and run it again this time it  passes in the future GitHub copilot will  know the full context of your project  and won't make silly mistakes like these  this is cool and all but what you'll  find is your app grows more and more  complex it becomes harder and harder to  prompt the AI effectively it's  non-deterministic which means you can  get different results from the same  prompt you never know what you're going  to get and that's complete Madness for a  programmer but now here's where things  get really mind-blowing and will give  you a glimpse into the future of  programming at this point you have the  general idea of how react works but you  may not know JavaScript very well or  haven't memorized all the little quirks  in the framework or maybe you're a react  expert and just don't want to go through  the tedious process of writing perfectly  structured code so what we can do next  is have chat GPT come up with a  pseudocode language for react what this  will do is allow us to agree on some  general guidelines to represent the  structure of a react component as you  can see here it looks kind of like yaml  and allows us to Define State and then  the rendering function or jsx and if we  don't like the way it looks we can tell  it to come up with a different idea like  maybe make it look more like python  actually no let's make it look like a  cooking recipe which is surprisingly a  very intuitive way to represent a react  component and as an added benefit you  could write this in any human language  and have it translate your pseudocode  back to English but from a practical  standpoint I think you want something  that kind of looks like yaml overall  it's way more concise and doesn't  require us to use precise syntax but at  the same time it will give us relatively  consistent results and we can make it  even better by including relevant  documentation or a style guide to force  it to write code in a style that fits  our project because gpt4 can now handle  up to 25 000 tokens the end result is  your own custom AI pseudocode language  as you can see here I wrote out a  relatively complex component in this  language and it generates perfect react  code as a result but most importantly it  generates the same code every time most  of the time maybe eighty percent of the  time this is pretty mind-blowing because  now any developer can have their own  custom tailored pseudocode language that  can transpile into complex code in  virtually any language without  understanding the underlying syntax in a  previous video I predicted that someday  there will be a universal AI language  but maybe I was wrong maybe every  developer gets to build their own AI  language custom tailored to optimize  their own productivity sounds like chaos  on a team but AI can also translate your  pseudo code into my pseudocode and my  pseudocode into your pseudocode in fact  one thing we could do right now is take  the generated react code and convert it  into a superior framework like svelte or  solid there's a million different  JavaScript Frameworks out there but now  we can use them without learning them in  fact we could use our pseudocode to  build the same app in multiple  Frameworks at the same time then and  Benchmark their performance and just  choose whichever one performs the best  that's more of a futuristic idea but  currently the main value of pseudocode  is just getting things done faster  without allowing the AI to become too  magical like in this example you can see  we're making an API call but currently  we don't have any kind of interface for  the response generally speaking gpt4  will provide better results when you  have statically typed code like  typescript or even just type hints in a  language like python in this case I have  a Json object and what I'll do is paste  that into chat GPT to turn it into a  typescript interface it's able to detect  the two different entities of TV shows  and actors and now we can use it in our  code now that chatgpt has this interface  we can also tell it to generate any kind  of helper functions we'll need like if  we wanted to map this object to all the  actor names that's a pretty handy trick  right now but once again in the future  it won't be necessary tools like copilot  will be able to introspect any API to  provide you with automatic and type  safety without any effort on your part  now the final thing we need to do as a  print engineer is document our code we  simply take the code we've already  generated until chatgpt to document it  congratulations you're now a 10x react  proofed engineer the starting salary is  about 335k this productivity boost is  both exciting and scary Goldman Sachs  just released a report saying that 300  million jobs could be affected by AI in  the near future but there's no reason to  be afraid software systems in real life  are complex beyond belief and not even  state-of-the-artai will want to touch  that code I do believe that AI will make  writing code significantly easier but  building complex software that powers  the world will still be done by humans  in the foreseeable future and my goal  with this channel is to teach you how to  do exactly that thanks for watching and  I will see you in the next one
[zh]诺贝尔<00:00:00.405>经济学<00:00:00.810>奖<00:00:01.215>获得者<00:00:01.620>保

2
00:00:01.910 --> 00:00:03.649
[en]Nobel prize winning Economist Paul  Krugman made an ominous prediction  recently saying AI like chat GPT won't  change the world anytime soon the reason  this is terrifying is that he's the same  guy who also predicted in the 1990s that  the internet was about as game changing  as a fax machine when it comes to  programming I've already seen enough the  need to memorize syntax for programming  is done the future is deterministic AI  pseudocode and the future is now uh  ladies and gentlemen if you will look  right here today's video is yet another  react.js tutorial just one of Millions  on the internet but it's no ordinary  tutorial it's the first tutorial to  leverage the full power of AI to write  code like a 10x developer even if you've  never written a single line of code in  your life what's crazy though is that  this tutorial can be applied to any  language or framework once you know some  basic programming principles and how to  prompt like a pro you can build almost  anything in your imagination but it's  not as simple as just asking chatgpt to  build you a react app you will need some  domain knowledge and understand how to  execute and validate the code that the  AI spits out let's go ahead and get  started with your AI printing  masterclass I'm assuming you know  nothing about react other than it's a  library for building uis I could sit  here and teach you about react and ask  you to buy my 500 react course but the  truth is that gpt4 can teach you better  than I can I hate to admit it but it's  true if you want to learn something you  know absolutely nothing about go ahead  and prompt it to explain it like you're  five in this case it'll explain how  react.js components are like Lego bricks  but for building websites which is the  perfect metaphor from there I ask it for  the most important Concepts that I  should know it then explains components  State and props and hooks if there's  anything you don't understand here you  can then prompt it to explain that one  thing in more detail or explain that to  you like your five one problem though is  that llms tend to hallucinate AKA makes  stuff up so as of today it's not really  a replacement for the react.js  documentation which is excellent by the  way however chat EBT has a browser  plugin that's on a waitlist right now  which will eventually solve that  hallucination problem so the react.js  docs are like the Bible and chatgpt is  like a priest who makes all the money  but sometimes invents his own ideas now  once you have a general idea about the  language or framework that you're trying  to build with the next step is to set up  a project that allows you to inject AI  code in a safe and effective way there's  an old programming proverb that says if  code is not tested it doesn't work and  that's especially true when working with  an AI that acts like it's tripping bowls  I'm freaking out man as someone who's  done a lot of react development I'm just  going to do it the old-fashioned way and  set the project up the way I want it  manually but doing things like this is  very 2022. like yesterday on Twitter I  saw this guy set up and build a project  entirely from voice commands and then  deploy it to versel  which means it did in fact deploy dude  it did it it nailed the background no  way I'm using vs code for Microsoft as  my editor it's not available today but  GitHub copilot X is coming a plug-in for  vs code that brings chat EPT directly  into your editor make sure you're  subscribed for the latest updates on  that tool the only other tool you'll  need is chat EPT ideally with gpt4 which  is currently paid but 3.5 will work as  well here I have vs code open to my  terminal with node.js installed in the  future we'll have tools like GitHub  copilot CLI that can find and explain  commands for us but for now I'm just  going to initialize a new react project  with VJs we'll go ahead and use  typescript because I have some  typescript tricks to show you and then  once inside that project we'll go ahead  and install another tool called  playwright for end-to-end testing in the  browser When developing an app testing  is technically not required but it's  extremely important when working with AI  because we need to validate that it does  what it's supposed to the good news  though is that AI can write its own test  as we'll see shortly now the main  component in the source directory is in  the app.tsx file let's go ahead and  prompt chatgpt to replace it with a more  basic hello world gpt4 is kind of slow  and can often be overly verbose so one  thing you can do is just say code only  to shorten the response that looks  pretty good let's copy and paste it into  our project now go to the terminal and  run npm run Dev and you should get this  hello world component but that's a  little too simple let's go back to chat  EPT and now have it modify this code  with a button that will toggle the  visibility of the hello world text when  doing that it explains how we'll need to  use react state to manage the visibility  paste the updated code into your project  save it and now you have a working  interactive react app that's pretty cool  but we want to make sure that the AI  doesn't accidentally break this code in  the future so let's ask it to write a  test with playwright once again copy the  code then go into the test directory and  create a new file called app.test.ts  here's a pro tip as a printing engineer  you can use control V on your keyboard  instead of doing right click paste to  maximize your speed now from there we  need to go into the package Json file  and set up a testing script if you  already have copilot installed you can  just type test and it should  automatically detect playwright and  create the script for you which is just  playwright test from there we can open  the terminal run npm run test and  playwright will test this code on  multiple browsers in parallel as you can  see it fails because we don't have the  right localhost Port set up so let's go  ahead and modify that in our testing  code and run it again this time it  passes in the future GitHub copilot will  know the full context of your project  and won't make silly mistakes like these  this is cool and all but what you'll  find is your app grows more and more  complex it becomes harder and harder to  prompt the AI effectively it's  non-deterministic which means you can  get different results from the same  prompt you never know what you're going  to get and that's complete Madness for a  programmer but now here's where things  get really mind-blowing and will give  you a glimpse into the future of  programming at this point you have the  general idea of how react works but you  may not know JavaScript very well or  haven't memorized all the little quirks  in the framework or maybe you're a react  expert and just don't want to go through  the tedious process of writing perfectly  structured code so what we can do next  is have chat GPT come up with a  pseudocode language for react what this  will do is allow us to agree on some  general guidelines to represent the  structure of a react component as you  can see here it looks kind of like yaml  and allows us to Define State and then  the rendering function or jsx and if we  don't like the way it looks we can tell  it to come up with a different idea like  maybe make it look more like python  actually no let's make it look like a  cooking recipe which is surprisingly a  very intuitive way to represent a react  component and as an added benefit you  could write this in any human language  and have it translate your pseudocode  back to English but from a practical  standpoint I think you want something  that kind of looks like yaml overall  it's way more concise and doesn't  require us to use precise syntax but at  the same time it will give us relatively  consistent results and we can make it  even better by including relevant  documentation or a style guide to force  it to write code in a style that fits  our project because gpt4 can now handle  up to 25 000 tokens the end result is  your own custom AI pseudocode language  as you can see here I wrote out a  relatively complex component in this  language and it generates perfect react  code as a result but most importantly it  generates the same code every time most  of the time maybe eighty percent of the  time this is pretty mind-blowing because  now any developer can have their own  custom tailored pseudocode language that  can transpile into complex code in  virtually any language without  understanding the underlying syntax in a  previous video I predicted that someday  there will be a universal AI language  but maybe I was wrong maybe every  developer gets to build their own AI  language custom tailored to optimize  their own productivity sounds like chaos  on a team but AI can also translate your  pseudo code into my pseudocode and my  pseudocode into your pseudocode in fact  one thing we could do right now is take  the generated react code and convert it  into a superior framework like svelte or  solid there's a million different  JavaScript Frameworks out there but now  we can use them without learning them in  fact we could use our pseudocode to  build the same app in multiple  Frameworks at the same time then and  Benchmark their performance and just  choose whichever one performs the best  that's more of a futuristic idea but  currently the main value of pseudocode  is just getting things done faster  without allowing the AI to become too  magical like in this example you can see  we're making an API call but currently  we don't have any kind of interface for  the response generally speaking gpt4  will provide better results when you  have statically typed code like  typescript or even just type hints in a  language like python in this case I have  a Json object and what I'll do is paste  that into chat GPT to turn it into a  typescript interface it's able to detect  the two different entities of TV shows  and actors and now we can use it in our  code now that chatgpt has this interface  we can also tell it to generate any kind  of helper functions we'll need like if  we wanted to map this object to all the  actor names that's a pretty handy trick  right now but once again in the future  it won't be necessary tools like copilot  will be able to introspect any API to  provide you with automatic and type  safety without any effort on your part  now the final thing we need to do as a  print engineer is document our code we  simply take the code we've already  generated until chatgpt to document it  congratulations you're now a 10x react  proofed engineer the starting salary is  about 335k this productivity boost is  both exciting and scary Goldman Sachs  just released a report saying that 300  million jobs could be affected by AI in  the near future but there's no reason to  be afraid software systems in real life  are complex beyond belief and not even  state-of-the-artai will want to touch  that code I do believe that AI will make  writing code significantly easier but  building complex software that powers  the world will still be done by humans  in the foreseeable future and my goal  with this channel is to teach you how to  do exactly that thanks for watching and  I will see you in the next one
[zh]诺贝尔经济学奖获得者保

3
00:00:03.649 --> 00:00:06.349
[en]
[zh]诺贝尔经济学奖获得者保
罗克鲁格曼<00:00:02.064>最近<00:00:02.208>做出<00:00:02.352>了<00:00:02.496>一<00:00:02.640>个<00:00:02.784>不祥<00:00:02.928>的<00:00:03.072>预测<00:00:03.216>，<00:00:03.360>他

4
00:00:06.349 --> 00:00:08.210
[en]
[zh]罗克鲁格曼最近做出了一个不祥的预测，他

5
00:00:08.210 --> 00:00:10.070
[en]
[zh]罗克鲁格曼最近做出了一个不祥的预测，他
说<00:00:03.905>像<00:00:04.151>聊天 <00:00:04.397>GPT <00:00:04.643>这样<00:00:04.889>的<00:00:05.135>人工<00:00:05.381>智能<00:00:05.627>不<00:00:05.873>会

6
00:00:10.070 --> 00:00:12.410
[en]
[zh]说像聊天 GPT 这样的人工智能不会

7
00:00:12.410 --> 00:00:14.089
[en]
[zh]说像聊天 GPT 这样的人工智能不会
很<00:00:06.794>快<00:00:07.229>改变<00:00:07.664>世界<00:00:08.099>，

8
00:00:14.089 --> 00:00:15.530
[en]
[zh]很快改变世界，

9
00:00:15.530 --> 00:00:17.269
[en]
[zh]很快改变世界，
这<00:00:08.510>很<00:00:08.800>可怕<00:00:09.090>的<00:00:09.380>原因<00:00:09.670>是<00:00:09.960>他

10
00:00:17.269 --> 00:00:19.010
[en]
[zh]这很可怕的原因是他

11
00:00:19.010 --> 00:00:21.410
[en]
[zh]这很可怕的原因是他
在 <00:00:10.590>1990 <00:00:11.100>年代<00:00:11.610>也<00:00:12.120>预测

12
00:00:21.410 --> 00:00:23.810
[en]
[zh]在 1990 年代也预测

13
00:00:23.810 --> 00:00:25.070
[en]
[zh]在 1990 年代也预测
互联网<00:00:12.671>将<00:00:12.922>像<00:00:13.173>改变<00:00:13.424>游戏<00:00:13.675>规则

14
00:00:25.070 --> 00:00:27.890
[en]
[zh]互联网将像改变游戏规则

15
00:00:27.890 --> 00:00:30.230
[en]
[zh]互联网将像改变游戏规则
一样<00:00:14.245>改变<00:00:14.391>世界 <00:00:14.537>一<00:00:14.683>台<00:00:14.829>传真机<00:00:14.975>，<00:00:15.121>当<00:00:15.267>涉及<00:00:15.413>到

16
00:00:30.230 --> 00:00:31.970
[en]
[zh]一样改变世界 一台传真机，当涉及到

17
00:00:31.970 --> 00:00:34.010
[en]
[zh]一样改变世界 一台传真机，当涉及到
编程<00:00:15.737>时<00:00:15.934>，<00:00:16.131>我<00:00:16.328>已经<00:00:16.525>看够<00:00:16.722>了<00:00:16.919>，

18
00:00:34.010 --> 00:00:36.049
[en]
[zh]编程时，我已经看够了，

19
00:00:36.049 --> 00:00:37.850
[en]
[zh]编程时，我已经看够了，
记住<00:00:17.594>编程语法<00:00:17.909>的<00:00:18.224>需要<00:00:18.539>已经

20
00:00:37.850 --> 00:00:39.229
[en]
[zh]记住编程语法的需要已经

21
00:00:39.229 --> 00:00:40.790
[en]
[zh]记住编程语法的需要已经
完成<00:00:19.360>，<00:00:19.700>未来<00:00:20.040>是<00:00:20.380>确定性<00:00:20.720>的 <00:00:21.060>AI

22
00:00:40.790 --> 00:00:42.410
[en]
[zh]完成，未来是确定性的 AI

23
00:00:42.410 --> 00:00:44.030
[en]
[zh]完成，未来是确定性的 AI
伪代码<00:00:21.720>，<00:00:22.020>未来<00:00:22.320>就<00:00:22.620>是<00:00:22.920>现在<00:00:23.220>，

24
00:00:44.030 --> 00:00:45.650
[en]
[zh]伪代码，未来就是现在，

25
00:00:45.650 --> 00:00:47.389
[en]
[zh]伪代码，未来就是现在，
女士们<00:00:23.979>，<00:00:24.138>先生们<00:00:24.297>，<00:00:24.456>如果<00:00:24.615>你们<00:00:24.774>看

26
00:00:47.389 --> 00:00:49.010
[en]
[zh]女士们，先生们，如果你们看

27
00:00:49.010 --> 00:00:51.410
[en]
[zh]女士们，先生们，如果你们看
这里<00:00:25.402>，<00:00:25.724>今天<00:00:26.046>的<00:00:26.368>视频<00:00:26.690>是<00:00:27.012>另<00:00:27.334>一<00:00:27.656>种

28
00:00:51.410 --> 00:00:53.209
[en]
[zh]这里，今天的视频是另一种

29
00:00:53.209 --> 00:00:54.950
[en]
[zh]这里，今天的视频是另一种
反应 <00:00:28.019>.js <00:00:28.138>教程<00:00:28.257>只<00:00:28.376>是<00:00:28.495>互联网<00:00:28.614>上<00:00:28.733>数<00:00:28.852>以<00:00:28.971>百万<00:00:29.090>计<00:00:29.209>的<00:00:29.328>教程<00:00:29.447>中<00:00:29.566>的<00:00:29.685>一<00:00:29.804>个<00:00:29.923>，

30
00:00:54.950 --> 00:00:56.869
[en]
[zh]反应 .js 教程只是互联网上数以百万计的教程中的一个，

31
00:00:56.869 --> 00:00:58.490
[en]
[zh]反应 .js 教程只是互联网上数以百万计的教程中的一个，
但<00:00:30.570>它<00:00:30.900>不<00:00:31.230>是<00:00:31.560>普通

32
00:00:58.490 --> 00:00:59.930
[en]
[zh]但它不是普通

33
00:00:59.930 --> 00:01:01.790
[en]
[zh]但它不是普通
教程<00:00:32.327>，<00:00:32.674>它<00:00:33.021>是<00:00:33.368>第一<00:00:33.715>个

34
00:01:01.790 --> 00:01:03.529
[en]
[zh]教程，它是第一个

35
00:01:03.529 --> 00:01:05.390
[en]
[zh]教程，它是第一个
利用 <00:00:34.470>AI <00:00:34.920>的<00:00:35.370>全部<00:00:35.820>力量

36
00:01:05.390 --> 00:01:06.770
[en]
[zh]利用 AI 的全部力量

37
00:01:06.770 --> 00:01:09.109
[en]
[zh]利用 AI 的全部力量
像 <00:00:36.204>10 <00:00:36.349>倍<00:00:36.494>开发<00:00:36.639>人员<00:00:36.784>一样<00:00:36.929>编写<00:00:37.074>代码<00:00:37.219>的<00:00:37.364>教程<00:00:37.509>，<00:00:37.654>即使<00:00:37.799>你

38
00:01:09.109 --> 00:01:11.030
[en]
[zh]像 10 倍开发人员一样编写代码的教程，即使你

39
00:01:11.030 --> 00:01:12.830
[en]
[zh]

40
00:01:12.830 --> 00:01:14.149
[en]
[zh]一生中<00:00:39.370>从未<00:00:39.501>写<00:00:39.632>过<00:00:39.763>一行<00:00:39.894>代码<00:00:40.025>，<00:00:40.156>这<00:00:40.287>太<00:00:40.418>疯狂<00:00:40.549>了 <00:00:40.680>尽管

41
00:01:14.149 --> 00:01:15.830
[en]
[zh]一生中从未写过一行代码，这太疯狂了 尽管

42
00:01:15.830 --> 00:01:17.450
[en]
[zh]一生中从未写过一行代码，这太疯狂了 尽管
本<00:00:41.076>教程<00:00:41.352>可以<00:00:41.628>应用<00:00:41.904>于<00:00:42.180>任何

43
00:01:17.450 --> 00:01:19.130
[en]
[zh]本教程可以应用于任何

44
00:01:19.130 --> 00:01:21.350
[en]
[zh]本教程可以应用于任何
语言<00:00:42.580>或<00:00:42.740>框架<00:00:42.900>，<00:00:43.060>但<00:00:43.220>一旦<00:00:43.380>您<00:00:43.540>了解<00:00:43.700>了<00:00:43.860>一些

45
00:01:21.350 --> 00:01:23.210
[en]
[zh]语言或框架，但一旦您了解了一些

46
00:01:23.210 --> 00:01:25.070
[en]
[zh]语言或框架，但一旦您了解了一些
基本<00:00:44.340>的<00:00:44.640>编程<00:00:44.940>原则<00:00:45.240>以及<00:00:45.540>如何

47
00:01:25.070 --> 00:01:26.510
[en]
[zh]基本的编程原则以及如何

48
00:01:26.510 --> 00:01:28.130
[en]
[zh]基本的编程原则以及如何
像<00:00:45.804>专业<00:00:45.948>人士<00:00:46.092>一样<00:00:46.236>进行<00:00:46.380>提示<00:00:46.524>，<00:00:46.668>您<00:00:46.812>几乎<00:00:46.956>可以<00:00:47.100>构建

49
00:01:28.130 --> 00:01:30.230
[en]
[zh]像专业人士一样进行提示，您几乎可以构建

50
00:01:30.230 --> 00:01:31.789
[en]
[zh]像专业人士一样进行提示，您几乎可以构建
您<00:00:47.586>想象<00:00:47.773>中<00:00:47.960>的<00:00:48.147>任何<00:00:48.334>东西<00:00:48.521>，<00:00:48.708>但<00:00:48.895>这

51
00:01:31.789 --> 00:01:33.350
[en]
[zh]您想象中的任何东西，但这

52
00:01:33.350 --> 00:01:35.270
[en]
[zh]您想象中的任何东西，但这
并不<00:00:49.515>像<00:00:50.010>让 <00:00:50.505>chatgpt <00:00:51.000>为

53
00:01:35.270 --> 00:01:37.069
[en]
[zh]并不像让 chatgpt 为

54
00:01:37.069 --> 00:01:39.649
[en]
[zh]并不像让 chatgpt 为
您<00:00:51.554>构建<00:00:51.688>一<00:00:51.822>个 <00:00:51.956>React <00:00:52.090>应用<00:00:52.224>程序<00:00:52.358>那么<00:00:52.492>简单 <00:00:52.626>您<00:00:52.760>将<00:00:52.894>需要<00:00:53.028>一些

55
00:01:39.649 --> 00:01:41.450
[en]
[zh]您构建一个 React 应用程序那么简单 您将需要一些

56
00:01:41.450 --> 00:01:43.069
[en]
[zh]您构建一个 React 应用程序那么简单 您将需要一些
领域<00:00:53.624>知识<00:00:54.029>并<00:00:54.434>了解<00:00:54.839>如何

57
00:01:43.069 --> 00:01:44.929
[en]
[zh]领域知识并了解如何

58
00:01:44.929 --> 00:01:47.090
[en]
[zh]领域知识并了解如何

59
00:01:47.090 --> 00:01:48.830
[en]
[zh]

60
00:01:48.830 --> 00:01:50.270
[en]
[zh]执行和验证

61
00:01:50.270 --> 00:01:52.249
[en]
[zh]执行和验证
AI <00:00:57.084>吐出<00:00:57.289>的<00:00:57.494>代码<00:00:57.699>让<00:00:57.904>我们<00:00:58.109>继续<00:00:58.314>并

62
00:01:52.249 --> 00:01:54.350
[en]
[zh]AI 吐出的代码让我们继续并

63
00:01:54.350 --> 00:01:55.670
[en]
[zh]AI 吐出的代码让我们继续并
开始<00:00:58.769>您<00:00:59.038>的 <00:00:59.307>AI <00:00:59.576>打印

64
00:01:55.670 --> 00:01:57.590
[en]
[zh]开始您的 AI 打印

65
00:01:57.590 --> 00:01:59.090
[en]
[zh]开始您的 AI 打印
大师班<00:01:00.520>我<00:01:01.100>假设<00:01:01.680>您

66
00:01:59.090 --> 00:02:00.469
[en]
[zh]大师班我假设您

67
00:02:00.469 --> 00:02:02.030
[en]
[zh]大师班我假设您
对 <00:01:01.987>React <00:01:02.174>一无所知<00:01:02.361>，<00:01:02.548>除了<00:01:02.735>它<00:01:02.922>是<00:01:03.109>一<00:01:03.296>个

68
00:02:02.030 --> 00:02:04.069
[en]
[zh]对 React 一无所知，除了它是一个

69
00:02:04.069 --> 00:02:06.109
[en]
[zh]对 React 一无所知，除了它是一个
用<00:01:03.732>于<00:01:03.925>构建 <00:01:04.118>uis <00:01:04.311>的<00:01:04.504>库<00:01:04.697>我<00:01:04.890>可以 <00:01:05.083>坐<00:01:05.276>在

70
00:02:06.109 --> 00:02:08.150
[en]
[zh]用于构建 uis 的库我可以 坐在

71
00:02:08.150 --> 00:02:10.190
[en]
[zh]用于构建 uis 的库我可以 坐在
这里<00:01:05.609>教<00:01:05.818>你<00:01:06.027>关于 <00:01:06.236>React <00:01:06.445>并<00:01:06.654>要求

72
00:02:10.190 --> 00:02:11.449
[en]
[zh]这里教你关于 React 并要求

73
00:02:11.449 --> 00:02:13.490
[en]
[zh]这里教你关于 React 并要求
你<00:01:07.097>购买<00:01:07.414>我<00:01:07.731>的 <00:01:08.048>500 <00:01:08.365>React <00:01:08.682>课程<00:01:08.999>但

74
00:02:13.490 --> 00:02:15.949
[en]
[zh]你购买我的 500 React 课程但

75
00:02:15.949 --> 00:02:17.570
[en]
[zh]你购买我的 500 React 课程但
事实<00:01:09.312>是 <00:01:09.505>gpt4 <00:01:09.698>可以<00:01:09.891>比<00:01:10.084>我<00:01:10.277>教<00:01:10.470>你<00:01:10.663>更<00:01:10.856>好

76
00:02:17.570 --> 00:02:19.070
[en]
[zh]事实是 gpt4 可以比我教你更好

77
00:02:19.070 --> 00:02:20.630
[en]
[zh]

78
00:02:20.630 --> 00:02:22.369
[en]
[zh]

79
00:02:22.369 --> 00:02:24.830
[en]
[zh]

80
00:02:24.830 --> 00:02:26.449
[en]
[zh]并<00:01:15.993>提示<00:01:16.146>它<00:01:16.299>像<00:01:16.452>你<00:01:16.605>五<00:01:16.758>岁<00:01:16.911>一样<00:01:17.064>解释<00:01:17.217>它

81
00:02:26.449 --> 00:02:28.430
[en]
[zh]并提示它像你五岁一样解释它

82
00:02:28.430 --> 00:02:30.550
[en]
[zh]并提示它像你五岁一样解释它
在<00:01:17.648>这<00:01:17.836>种<00:01:18.024>情况<00:01:18.212>下<00:01:18.400>它<00:01:18.588>会<00:01:18.776>解释

83
00:02:30.550 --> 00:02:34.490
[en]
[zh]在这种情况下它会解释

84
00:02:34.490 --> 00:02:37.430
[en]
[zh]在这种情况下它会解释
react.js <00:01:19.476>组件<00:01:19.812>如何<00:01:20.148>像<00:01:20.484>乐高<00:01:20.820>积木

85
00:02:37.430 --> 00:02:39.949
[en]
[zh]react.js 组件如何像乐高积木

86
00:02:39.949 --> 00:02:41.990
[en]
[zh]react.js 组件如何像乐高积木
但是<00:01:21.696>对于<00:01:22.032>构建<00:01:22.368>网站<00:01:22.704>这<00:01:23.040>是

87
00:02:41.990 --> 00:02:44.570
[en]
[zh]但是对于构建网站这是

88
00:02:44.570 --> 00:02:46.970
[en]
[zh]但是对于构建网站这是
完美<00:01:23.468>的<00:01:23.716>比喻<00:01:23.964>从<00:01:24.212>那里<00:01:24.460>我<00:01:24.708>问<00:01:24.956>它

89
00:02:46.970 --> 00:02:48.350
[en]
[zh]完美的比喻从那里我问它

90
00:02:48.350 --> 00:02:49.850
[en]
[zh]完美的比喻从那里我问它
我<00:01:25.268>应该<00:01:25.456>知道<00:01:25.644>的<00:01:25.832>最<00:01:26.020>重要<00:01:26.208>的<00:01:26.396>概念

91
00:02:49.850 --> 00:02:51.410
[en]
[zh]我应该知道的最重要的概念

92
00:02:51.410 --> 00:02:54.470
[en]
[zh]我应该知道的最重要的概念
然后<00:01:26.775>它<00:01:27.030>会<00:01:27.285>解释<00:01:27.540>组件

93
00:02:54.470 --> 00:02:56.750
[en]
[zh]然后它会解释组件

94
00:02:56.750 --> 00:02:58.550
[en]
[zh]然后它会解释组件
State <00:01:28.524>和 <00:01:28.908>props <00:01:29.292>和 <00:01:29.676>hooks <00:01:30.060>如果

95
00:02:58.550 --> 00:03:00.770
[en]
[zh]State 和 props 和 hooks 如果

96
00:03:00.770 --> 00:03:02.270
[en]
[zh]State 和 props 和 hooks 如果
这里<00:01:30.397>有<00:01:30.554>任何<00:01:30.711>你<00:01:30.868>不<00:01:31.025>明白<00:01:31.182>的<00:01:31.339>东西<00:01:31.496>你

97
00:03:02.270 --> 00:03:04.790
[en]
[zh]这里有任何你不明白的东西你

98
00:03:04.790 --> 00:03:07.009
[en]
[zh]这里有任何你不明白的东西你

99
00:03:07.009 --> 00:03:08.750
[en]
[zh]

100
00:03:08.750 --> 00:03:10.670
[en]
[zh]可以提示它

101
00:03:10.670 --> 00:03:11.930
[en]
[zh]可以提示它
更<00:01:33.608>详细<00:01:33.856>地<00:01:34.104>解释<00:01:34.352>一<00:01:34.600>件<00:01:34.848>事<00:01:35.096>或者

102
00:03:11.930 --> 00:03:13.369
[en]
[zh]更详细地解释一件事或者

103
00:03:13.369 --> 00:03:14.809
[en]
[zh]更详细地解释一件事或者
像<00:01:35.436>你<00:01:35.592>的<00:01:35.748>五<00:01:35.904>个<00:01:36.060>问题<00:01:36.216>一样<00:01:36.372>向<00:01:36.528>你<00:01:36.684>解释<00:01:36.840>，

104
00:03:14.809 --> 00:03:16.309
[en]
[zh]像你的五个问题一样向你解释，

105
00:03:16.309 --> 00:03:18.350
[en]
[zh]像你的五个问题一样向你解释，
尽管 <00:01:37.459>llms <00:01:37.839>倾向于<00:01:38.219>产生<00:01:38.599>幻觉 <00:01:38.979>AKA <00:01:39.359>makes

106
00:03:18.350 --> 00:03:20.149
[en]
[zh]尽管 llms 倾向于产生幻觉 AKA makes

107
00:03:20.149 --> 00:03:21.710
[en]
[zh]尽管 llms 倾向于产生幻觉 AKA makes
直<00:01:39.861>到<00:01:40.063>今天<00:01:40.265>，<00:01:40.467>它<00:01:40.669>并<00:01:40.871>不<00:01:41.073>能<00:01:41.275>真正

108
00:03:21.710 --> 00:03:23.449
[en]
[zh]直到今天，它并不能真正

109
00:03:23.449 --> 00:03:25.070
[en]
[zh]直到今天，它并不能真正
替代 <00:01:42.420>react.js

110
00:03:25.070 --> 00:03:26.390
[en]
[zh]替代 react.js

111
00:03:26.390 --> 00:03:28.190
[en]
[zh]替代 react.js
文档<00:01:43.253>，<00:01:43.427>顺便<00:01:43.601>说<00:01:43.775>一<00:01:43.949>句<00:01:44.123>，<00:01:44.297>它<00:01:44.471>非常<00:01:44.645>出色<00:01:44.819>，

112
00:03:28.190 --> 00:03:29.809
[en]
[zh]文档，顺便说一句，它非常出色，

113
00:03:29.809 --> 00:03:31.550
[en]
[zh]文档，顺便说一句，它非常出色，
但是<00:01:45.239>聊天 <00:01:45.539>EBT <00:01:45.839>有<00:01:46.139>一<00:01:46.439>个<00:01:46.739>浏览器

114
00:03:31.550 --> 00:03:33.649
[en]
[zh]但是聊天 EBT 有一个浏览器

115
00:03:33.649 --> 00:03:35.930
[en]
[zh]但是聊天 EBT 有一个浏览器
插件<00:01:47.331>，<00:01:47.562>现在<00:01:47.793>正在<00:01:48.024>等候<00:01:48.255>名单<00:01:48.486>上<00:01:48.717>，

116
00:03:35.930 --> 00:03:38.149
[en]
[zh]插件，现在正在等候名单上，

117
00:03:38.149 --> 00:03:40.550
[en]
[zh]插件，现在正在等候名单上，
它<00:01:49.169>最终<00:01:49.498>将<00:01:49.827>解决<00:01:50.156>这个

118
00:03:40.550 --> 00:03:42.229
[en]
[zh]它最终将解决这个

119
00:03:42.229 --> 00:03:44.149
[en]
[zh]它最终将解决这个
幻觉<00:01:50.624>问题<00:01:50.968>，<00:01:51.312>所以 <00:01:51.656>react.js

120
00:03:44.149 --> 00:03:45.890
[en]
[zh]幻觉问题，所以 react.js

121
00:03:45.890 --> 00:03:47.750
[en]
[zh]幻觉问题，所以 react.js
文档<00:01:52.559>是 <00:01:52.859>就<00:01:53.159>像<00:01:53.459>圣经<00:01:53.759>一样<00:01:54.059>，chatgpt

122
00:03:47.750 --> 00:03:49.910
[en]
[zh]文档是 就像圣经一样，chatgpt

123
00:03:49.910 --> 00:03:51.710
[en]
[zh]文档是 就像圣经一样，chatgpt
就<00:01:54.455>像<00:01:54.550>一<00:01:54.645>个<00:01:54.740>牧师<00:01:54.835>，<00:01:54.930>他<00:01:55.025>赚<00:01:55.120>了<00:01:55.215>所有<00:01:55.310>的<00:01:55.405>钱<00:01:55.500>，

124
00:03:51.710 --> 00:03:53.509
[en]
[zh]就像一个牧师，他赚了所有的钱，

125
00:03:53.509 --> 00:03:55.490
[en]
[zh]就像一个牧师，他赚了所有的钱，
但<00:01:57.180>现在

126
00:03:55.490 --> 00:03:57.289
[en]
[zh]但现在

127
00:03:57.289 --> 00:03:59.330
[en]
[zh]但现在
一旦<00:01:57.670>你<00:01:57.740>对<00:01:57.810>你<00:01:57.880>试图<00:01:57.950>构建<00:01:58.020>的<00:01:58.090>语言<00:01:58.160>或<00:01:58.230>框架<00:01:58.300>有<00:01:58.370>了<00:01:58.440>一<00:01:58.510>个<00:01:58.580>大致<00:01:58.650>的<00:01:58.720>了解<00:01:58.790>，

128
00:03:59.330 --> 00:04:00.710
[en]
[zh]一旦你对你试图构建的语言或框架有了一个大致的了解，

129
00:04:00.710 --> 00:04:02.690
[en]
[zh]

130
00:04:02.690 --> 00:04:04.309
[en]
[zh]下<00:02:00.767>一<00:02:01.055>步<00:02:01.343>就<00:02:01.631>是<00:02:01.919>建立

131
00:04:04.309 --> 00:04:05.869
[en]
[zh]下一步就是建立

132
00:04:05.869 --> 00:04:07.910
[en]
[zh]下一步就是建立
一<00:02:02.363>个<00:02:02.686>项目 <00:02:03.009>允许<00:02:03.332>您<00:02:03.655>以

133
00:04:07.910 --> 00:04:09.350
[en]
[zh]一个项目 允许您以

134
00:04:09.350 --> 00:04:10.850
[en]
[zh]一个项目 允许您以
安全<00:02:04.349>有效<00:02:04.619>的<00:02:04.889>方式<00:02:05.159>注入 <00:02:05.429>AI <00:02:05.699>代码

135
00:04:10.850 --> 00:04:12.530
[en]
[zh]安全有效的方式注入 AI 代码

136
00:04:12.530 --> 00:04:14.449
[en]
[zh]

137
00:04:14.449 --> 00:04:16.789
[en]
[zh]

138
00:04:16.789 --> 00:04:19.370
[en]
[zh]

139
00:04:19.370 --> 00:04:21.349
[en]
[zh]

140
00:04:21.349 --> 00:04:23.450
[en]
[zh]

141
00:04:23.450 --> 00:04:25.550
[en]
[zh]

142
00:04:25.550 --> 00:04:27.350
[en]
[zh]作为一个

143
00:04:27.350 --> 00:04:29.150
[en]
[zh]作为一个
做<00:02:16.109>过<00:02:16.259>很多 <00:02:16.409>React <00:02:16.559>开发<00:02:16.709>的<00:02:16.859>人<00:02:17.009>，<00:02:17.159>我<00:02:17.309>只<00:02:17.459>是

144
00:04:29.150 --> 00:04:31.129
[en]
[zh]做过很多 React 开发的人，我只是

145
00:04:31.129 --> 00:04:32.749
[en]
[zh]做过很多 React 开发的人，我只是
打算<00:02:17.713>用<00:02:17.846>老式<00:02:17.979>的<00:02:18.112>方式<00:02:18.245>来<00:02:18.378>做<00:02:18.511>，<00:02:18.644>然后<00:02:18.777>按照

146
00:04:32.749 --> 00:04:34.129
[en]
[zh]打算用老式的方式来做，然后按照

147
00:04:34.129 --> 00:04:35.629
[en]
[zh]打算用老式的方式来做，然后按照
我<00:02:19.277>想要<00:02:19.474>的<00:02:19.671>方式<00:02:19.868>手动<00:02:20.065>设置<00:02:20.262>项目<00:02:20.459>，

148
00:04:35.629 --> 00:04:37.249
[en]
[zh]我想要的方式手动设置项目，

149
00:04:37.249 --> 00:04:38.749
[en]
[zh]我想要的方式手动设置项目，
但是<00:02:20.890>做<00:02:21.140>这样<00:02:21.390>的<00:02:21.640>事情<00:02:21.890>已经<00:02:22.140>是

150
00:04:38.749 --> 00:04:40.969
[en]
[zh]但是做这样的事情已经是

151
00:04:40.969 --> 00:04:42.350
[en]
[zh]但是做这样的事情已经是
2022 <00:02:22.589>年<00:02:22.799>了<00:02:23.009>。<00:02:23.219>就<00:02:23.429>像<00:02:23.639>昨天<00:02:23.849>在 <00:02:24.059>Twitter <00:02:24.269>上<00:02:24.479>我

152
00:04:42.350 --> 00:04:44.330
[en]
[zh]2022 年了。就像昨天在 Twitter 上我

153
00:04:44.330 --> 00:04:45.950
[en]
[zh]2022 年了。就像昨天在 Twitter 上我
看到<00:02:24.942>了<00:02:25.044>这个<00:02:25.146>人 <00:02:25.248>完全<00:02:25.350>通过<00:02:25.452>语音<00:02:25.554>命令<00:02:25.656>设置<00:02:25.758>和<00:02:25.860>构建<00:02:25.962>一<00:02:26.064>个<00:02:26.166>项目<00:02:26.268>，

154
00:04:45.950 --> 00:04:47.749
[en]
[zh]看到了这个人 完全通过语音命令设置和构建一个项目，

155
00:04:47.749 --> 00:04:49.189
[en]
[zh]看到了这个人 完全通过语音命令设置和构建一个项目，
然后<00:02:28.319>将

156
00:04:49.189 --> 00:04:51.350
[en]
[zh]然后将

157
00:04:51.350 --> 00:04:53.510
[en]
[zh]然后将
其<00:02:28.620>部署<00:02:28.800>到 <00:02:28.980>versel，

158
00:04:53.510 --> 00:04:55.010
[en]
[zh]其部署到 versel，

159
00:04:55.010 --> 00:04:57.050
[en]
[zh]其部署到 versel，
这<00:02:30.858>意味<00:02:31.156>着<00:02:31.454>它<00:02:31.752>确实<00:02:32.050>部署<00:02:32.348>了<00:02:32.646>花花<00:02:32.944>公子<00:02:33.242>，<00:02:33.540>它

160
00:04:57.050 --> 00:04:58.610
[en]
[zh]这意味着它确实部署了花花公子，它

161
00:04:58.610 --> 00:05:00.110
[en]
[zh]这意味着它确实部署了花花公子，它
做到<00:02:34.777>了<00:02:35.054>，<00:02:35.331>它<00:02:35.608>把<00:02:35.885>背景<00:02:36.162>钉牢<00:02:36.439>了<00:02:36.716>，

162
00:05:00.110 --> 00:05:02.150
[en]
[zh]做到了，它把背景钉牢了，

163
00:05:02.150 --> 00:05:03.890
[en]
[zh]做到了，它把背景钉牢了，
我<00:02:37.717>没有<00:02:37.994>办法<00:02:38.271>使用<00:02:38.548>微软<00:02:38.825>的 <00:02:39.102>vs <00:02:39.379>代码<00:02:39.656>作为

164
00:05:03.890 --> 00:05:05.390
[en]
[zh]我没有办法使用微软的 vs 代码作为

165
00:05:05.390 --> 00:05:06.770
[en]
[zh]我没有办法使用微软的 vs 代码作为
我<00:02:40.121>的<00:02:40.283>编辑器<00:02:40.445>，<00:02:40.607>它<00:02:40.769>今天<00:02:40.931>不<00:02:41.093>可<00:02:41.255>用<00:02:41.417>，<00:02:41.579>但

166
00:05:06.770 --> 00:05:08.689
[en]
[zh]我的编辑器，它今天不可用，但

167
00:05:08.689 --> 00:05:10.790
[en]
[zh]我的编辑器，它今天不可用，但
GitHub  <00:02:42.390>copilot <00:02:42.780>X <00:02:43.170>即将<00:02:43.560>推出<00:02:43.950>一<00:02:44.340>个

168
00:05:10.790 --> 00:05:12.170
[en]
[zh]GitHub  copilot X 即将推出一个

169
00:05:12.170 --> 00:05:13.730
[en]
[zh]GitHub  copilot X 即将推出一个
vs <00:02:44.820>code <00:02:45.060>插件<00:02:45.300>，<00:02:45.540>可<00:02:45.780>将<00:02:46.020>聊天 <00:02:46.260>EPT <00:02:46.500>直接

170
00:05:13.730 --> 00:05:14.810
[en]
[zh]vs code 插件，可将聊天 EPT 直接

171
00:05:14.810 --> 00:05:16.490
[en]
[zh]vs code 插件，可将聊天 EPT 直接
带入<00:02:47.220>您<00:02:47.460>的<00:02:47.700>编辑器<00:02:47.940>确保<00:02:48.180>您

172
00:05:16.490 --> 00:05:18.290
[en]
[zh]带入您的编辑器确保您

173
00:05:18.290 --> 00:05:19.850
[en]
[zh]带入您的编辑器确保您
订阅<00:02:49.620>了

174
00:05:19.850 --> 00:05:21.409
[en]
[zh]订阅了

175
00:05:21.409 --> 00:05:22.909
[en]
[zh]订阅了
该<00:02:49.997>工具<00:02:50.134>的<00:02:50.271>最新<00:02:50.408>更新<00:02:50.545>您<00:02:50.682>唯一<00:02:50.819>需要<00:02:50.956>的<00:02:51.093>其他<00:02:51.230>工具

176
00:05:22.909 --> 00:05:24.290
[en]
[zh]该工具的最新更新您唯一需要的其他工具

177
00:05:24.290 --> 00:05:26.150
[en]
[zh]该工具的最新更新您唯一需要的其他工具
是<00:02:51.948>最好<00:02:52.476>使用 <00:02:53.004>gpt4 <00:02:53.532>聊天 <00:02:54.060>EPT，

178
00:05:26.150 --> 00:05:27.890
[en]
[zh]是最好使用 gpt4 聊天 EPT，

179
00:05:27.890 --> 00:05:29.749
[en]
[zh]是最好使用 gpt4 聊天 EPT，
目前<00:02:55.005>已<00:02:55.530>付费 <00:02:56.055>但是 <00:02:56.580>3.5

180
00:05:29.749 --> 00:05:31.670
[en]
[zh]目前已付费 但是 3.5

181
00:05:31.670 --> 00:05:33.350
[en]
[zh]目前已付费 但是 3.5
在<00:02:56.872>这里<00:02:56.984>也<00:02:57.096>可以<00:02:57.208>工作 <00:02:57.320>我<00:02:57.432>已经<00:02:57.544>在<00:02:57.656>我<00:02:57.768>的<00:02:57.880>终端<00:02:57.992>上<00:02:58.104>打开<00:02:58.216>了 <00:02:58.328>vs <00:02:58.440>code

182
00:05:33.350 --> 00:05:34.969
[en]
[zh]在这里也可以工作 我已经在我的终端上打开了 vs code

183
00:05:34.969 --> 00:05:36.830
[en]
[zh]在这里也可以工作 我已经在我的终端上打开了 vs code
并<00:02:58.967>在<00:02:59.374>未来<00:02:59.781>安装<00:03:00.188>了 <00:03:00.595>node.js

184
00:05:36.830 --> 00:05:38.450
[en]
[zh]并在未来安装了 node.js

185
00:05:38.450 --> 00:05:40.189
[en]
[zh]并在未来安装了 node.js
我们<00:03:01.065>将<00:03:01.350>拥有<00:03:01.635>像 <00:03:01.920>GitHub

186
00:05:40.189 --> 00:05:42.350
[en]
[zh]我们将拥有像 GitHub

187
00:05:42.350 --> 00:05:43.610
[en]
[zh]我们将拥有像 GitHub
copilot <00:03:02.514>CLI <00:03:02.748>这样<00:03:02.982>的<00:03:03.216>工具<00:03:03.450>可以<00:03:03.684>为<00:03:03.918>我们<00:03:04.152>找到<00:03:04.386>和<00:03:04.620>解释

188
00:05:43.610 --> 00:05:45.290
[en]
[zh]copilot CLI 这样的工具可以为我们找到和解释

189
00:05:45.290 --> 00:05:46.850
[en]
[zh]copilot CLI 这样的工具可以为我们找到和解释
命令<00:03:05.208>但是<00:03:05.616>现在<00:03:06.024>我<00:03:06.432>只<00:03:06.840>是

190
00:05:46.850 --> 00:05:48.529
[en]
[zh]命令但是现在我只是

191
00:05:48.529 --> 00:05:50.450
[en]
[zh]命令但是现在我只是
要<00:03:07.259>初<00:03:07.499>始化 <00:03:07.739>一<00:03:07.979>个<00:03:08.219>新<00:03:08.459>的

192
00:05:50.450 --> 00:05:52.310
[en]
[zh]要初始化 一个新的

193
00:05:52.310 --> 00:05:54.110
[en]
[zh]要初始化 一个新的
带有 <00:03:08.960>VJ <00:03:09.160>的 <00:03:09.360>React <00:03:09.560>项目<00:03:09.760>，<00:03:09.960>我们<00:03:10.160>将<00:03:10.360>继续<00:03:10.560>使用

194
00:05:54.110 --> 00:05:55.430
[en]
[zh]带有 VJ 的 React 项目，我们将继续使用

195
00:05:55.430 --> 00:05:57.110
[en]
[zh]带有 VJ 的 React 项目，我们将继续使用
TypeScript，<00:03:10.950>因为<00:03:11.220>我<00:03:11.490>有<00:03:11.760>一些

196
00:05:57.110 --> 00:05:58.730
[en]
[zh]TypeScript，因为我有一些

197
00:05:58.730 --> 00:06:00.110
[en]
[zh]TypeScript，因为我有一些
TypeScript <00:03:12.137>技巧<00:03:12.334>可以<00:03:12.531>向<00:03:12.728>您<00:03:12.925>展示<00:03:13.122>，<00:03:13.319>然后

198
00:06:00.110 --> 00:06:01.730
[en]
[zh]TypeScript 技巧可以向您展示，然后

199
00:06:01.730 --> 00:06:03.230
[en]
[zh]TypeScript 技巧可以向您展示，然后
一旦<00:03:13.576>进入<00:03:13.773>该<00:03:13.970>项目<00:03:14.167>，<00:03:14.364>我们<00:03:14.561>将<00:03:14.758>继续

200
00:06:03.230 --> 00:06:05.450
[en]
[zh]一旦进入该项目，我们将继续

201
00:06:05.450 --> 00:06:07.010
[en]
[zh]一旦进入该项目，我们将继续
安装<00:03:15.083>另<00:03:15.347>一<00:03:15.611>个<00:03:15.875>名<00:03:16.139>为

202
00:06:07.010 --> 00:06:08.930
[en]
[zh]安装另一个名为

203
00:06:08.930 --> 00:06:10.490
[en]
[zh]安装另一个名为
playwright <00:03:16.488>的<00:03:16.657>工具<00:03:16.826>，<00:03:16.995>用于<00:03:17.164>在<00:03:17.333>浏览器<00:03:17.502>中<00:03:17.671>进行<00:03:17.840>端到<00:03:18.009>端<00:03:18.178>测试

204
00:06:10.490 --> 00:06:12.890
[en]
[zh]playwright 的工具，用于在浏览器中进行端到端测试

205
00:06:12.890 --> 00:06:14.390
[en]
[zh]playwright 的工具，用于在浏览器中进行端到端测试
在<00:03:18.548>开发<00:03:18.736>应用<00:03:18.924>程序<00:03:19.112>时<00:03:19.300>，<00:03:19.488>测试<00:03:19.676>在

206
00:06:14.390 --> 00:06:16.730
[en]
[zh]在开发应用程序时，测试在

207
00:06:16.730 --> 00:06:19.310
[en]
[zh]在开发应用程序时，测试在
技术<00:03:20.364>上<00:03:20.569>不<00:03:20.774>是<00:03:20.979>必需<00:03:21.184>的<00:03:21.389>，<00:03:21.594>但

208
00:06:19.310 --> 00:06:21.230
[en]
[zh]技术上不是必需的，但

209
00:06:21.230 --> 00:06:23.029
[en]
[zh]技术上不是必需的，但
在<00:03:21.949>使用 <00:03:22.178>AI <00:03:22.407>时<00:03:22.636>非常<00:03:22.865>重要<00:03:23.094>，

210
00:06:23.029 --> 00:06:24.710
[en]
[zh]在使用 AI 时非常重要，

211
00:06:24.710 --> 00:06:26.330
[en]
[zh]在使用 AI 时非常重要，
因为<00:03:23.664>我们<00:03:23.869>需要<00:03:24.074>验证<00:03:24.279>它<00:03:24.484>是否<00:03:24.689>做<00:03:24.894>了

212
00:06:26.330 --> 00:06:28.430
[en]
[zh]因为我们需要验证它是否做了

213
00:06:28.430 --> 00:06:30.350
[en]
[zh]因为我们需要验证它是否做了
它<00:03:25.280>应该<00:03:25.480>做<00:03:25.680>的<00:03:25.880>好<00:03:26.080>消息<00:03:26.280>，

214
00:06:30.350 --> 00:06:31.850
[en]
[zh]它应该做的好消息，

215
00:06:31.850 --> 00:06:33.409
[en]
[zh]它应该做的好消息，
尽管 <00:03:26.631>AI <00:03:26.862>可以<00:03:27.093>编写<00:03:27.324>自己<00:03:27.555>的<00:03:27.786>测试<00:03:28.017>，

216
00:06:33.409 --> 00:06:35.150
[en]
[zh]尽管 AI 可以编写自己的测试，

217
00:06:35.150 --> 00:06:37.129
[en]
[zh]尽管 AI 可以编写自己的测试，
我们<00:03:28.414>很<00:03:28.628>快<00:03:28.842>就<00:03:29.056>会<00:03:29.270>看到<00:03:29.484>主要<00:03:29.698>的

218
00:06:37.129 --> 00:06:39.230
[en]
[zh]我们很快就会看到主要的

219
00:06:39.230 --> 00:06:40.430
[en]
[zh]我们很快就会看到主要的
源目录<00:03:30.224>中<00:03:30.629>的<00:03:31.034>组件<00:03:31.439>在

220
00:06:40.430 --> 00:06:42.830
[en]
[zh]源目录中的组件在

221
00:06:42.830 --> 00:06:44.570
[en]
[zh]源目录中的组件在
app.tsx <00:03:31.890>文件<00:03:32.220>中<00:03:32.550>让<00:03:32.880>我们<00:03:33.210>继续<00:03:33.540>并

222
00:06:44.570 --> 00:06:46.370
[en]
[zh]app.tsx 文件中让我们继续并

223
00:06:46.370 --> 00:06:48.110
[en]
[zh]app.tsx 文件中让我们继续并
提示 <00:03:34.079>chatgpt <00:03:34.499>将<00:03:34.919>其<00:03:35.339>替换为<00:03:35.759>更

224
00:06:48.110 --> 00:06:49.790
[en]
[zh]提示 chatgpt 将其替换为更

225
00:06:49.790 --> 00:06:51.710
[en]
[zh]提示 chatgpt 将其替换为更
基本<00:03:36.270>的 <00:03:36.600>hello <00:03:36.930>world <00:03:37.260>gpt4 <00:03:37.590>有点<00:03:37.920>慢

226
00:06:51.710 --> 00:06:53.570
[en]
[zh]基本的 hello world gpt4 有点慢

227
00:06:53.570 --> 00:06:55.909
[en]
[zh]基本的 hello world gpt4 有点慢
并且<00:03:38.699>通常<00:03:39.239>过于<00:03:39.779>冗长<00:03:40.319>所以

228
00:06:55.909 --> 00:06:57.830
[en]
[zh]并且通常过于冗长所以

229
00:06:57.830 --> 00:06:59.749
[en]
[zh]并且通常过于冗长所以
你<00:03:40.679>可以<00:03:40.798>做<00:03:40.917>的<00:03:41.036>一<00:03:41.155>件<00:03:41.274>事<00:03:41.393>就<00:03:41.512>是<00:03:41.631>只<00:03:41.750>说<00:03:41.869>代码

230
00:06:59.749 --> 00:07:01.370
[en]
[zh]你可以做的一件事就是只说代码

231
00:07:01.370 --> 00:07:03.590
[en]
[zh]你可以做的一件事就是只说代码

232
00:07:03.590 --> 00:07:05.749
[en]
[zh]

233
00:07:05.749 --> 00:07:06.830
[en]
[zh]缩短看起来

234
00:07:06.830 --> 00:07:08.510
[en]
[zh]缩短看起来
不错<00:03:44.315>的<00:03:44.471>响应<00:03:44.627>让<00:03:44.783>我们<00:03:44.939>将<00:03:45.095>其<00:03:45.251>复制<00:03:45.407>并<00:03:45.563>粘贴<00:03:45.719>到

235
00:07:08.510 --> 00:07:10.550
[en]
[zh]不错的响应让我们将其复制并粘贴到

236
00:07:10.550 --> 00:07:12.170
[en]
[zh]不错的响应让我们将其复制并粘贴到
我们<00:03:46.114>的<00:03:46.328>项目<00:03:46.542>中<00:03:46.756>现在<00:03:46.970>转到<00:03:47.184>终端<00:03:47.398>并

237
00:07:12.170 --> 00:07:13.309
[en]
[zh]我们的项目中现在转到终端并

238
00:07:13.309 --> 00:07:15.050
[en]
[zh]我们的项目中现在转到终端并
运行 <00:03:48.042>npm <00:03:48.324>run <00:03:48.606>Dev <00:03:48.888>你<00:03:49.170>应该<00:03:49.452>得到<00:03:49.734>这个

239
00:07:15.050 --> 00:07:16.670
[en]
[zh]运行 npm run Dev 你应该得到这个

240
00:07:16.670 --> 00:07:18.170
[en]
[zh]运行 npm run Dev 你应该得到这个
hello <00:03:50.325>world <00:03:50.730>组件<00:03:51.135>但是<00:03:51.540>这

241
00:07:18.170 --> 00:07:20.029
[en]
[zh]hello world 组件但是这

242
00:07:20.029 --> 00:07:21.710
[en]
[zh]hello world 组件但是这
有点<00:03:51.942>太<00:03:52.164>简单<00:03:52.386>了<00:03:52.608>让<00:03:52.830>我们<00:03:53.052>回到<00:03:53.274>聊天

243
00:07:21.710 --> 00:07:23.150
[en]
[zh]有点太简单了让我们回到聊天

244
00:07:23.150 --> 00:07:25.070
[en]
[zh]有点太简单了让我们回到聊天
EPT <00:03:53.776>现在<00:03:54.033>让<00:03:54.290>它<00:03:54.547>修改 <00:03:54.804>这<00:03:55.061>段<00:03:55.318>代码

245
00:07:25.070 --> 00:07:26.990
[en]
[zh]EPT 现在让它修改 这段代码

246
00:07:26.990 --> 00:07:28.850
[en]
[zh]EPT 现在让它修改 这段代码
带有<00:03:55.905>一<00:03:56.310>个<00:03:56.715>按钮<00:03:57.120>，

247
00:07:28.850 --> 00:07:30.409
[en]
[zh]带有一个按钮，

248
00:07:30.409 --> 00:07:32.749
[en]
[zh]带有一个按钮，
在<00:03:57.434>执行<00:03:57.569>此<00:03:57.704>操作<00:03:57.839>时<00:03:57.974>将<00:03:58.109>切换 <00:03:58.244>hello <00:03:58.379>world <00:03:58.514>文本<00:03:58.649>的<00:03:58.784>可见<00:03:58.919>性

249
00:07:32.749 --> 00:07:34.309
[en]
[zh]在执行此操作时将切换 hello world 文本的可见性

250
00:07:34.309 --> 00:07:35.629
[en]
[zh]在执行此操作时将切换 hello world 文本的可见性
它<00:03:59.603>解释<00:03:59.866>了<00:04:00.129>我们<00:04:00.392>如何<00:04:00.655>需要

251
00:07:35.629 --> 00:07:37.730
[en]
[zh]它解释了我们如何需要

252
00:07:37.730 --> 00:07:39.409
[en]
[zh]它解释了我们如何需要
使用<00:04:00.942>反应<00:04:01.164>状态<00:04:01.386>来<00:04:01.608>管理<00:04:01.830>可<00:04:02.052>见性<00:04:02.274>将

253
00:07:39.409 --> 00:07:41.330
[en]
[zh]使用反应状态来管理可见性将

254
00:07:41.330 --> 00:07:43.249
[en]
[zh]使用反应状态来管理可见性将
更新<00:04:02.872>的<00:04:03.044>代码<00:04:03.216>粘贴<00:04:03.388>到<00:04:03.560>您<00:04:03.732>的<00:04:03.904>项目<00:04:04.076>中

255
00:07:43.249 --> 00:07:45.170
[en]
[zh]更新的代码粘贴到您的项目中

256
00:07:45.170 --> 00:07:47.270
[en]
[zh]更新的代码粘贴到您的项目中
保存<00:04:04.479>它<00:04:04.639>，<00:04:04.799>现在<00:04:04.959>您<00:04:05.119>有<00:04:05.279>一<00:04:05.439>个<00:04:05.599>有效<00:04:05.759>的

257
00:07:47.270 --> 00:07:49.010
[en]
[zh]保存它，现在您有一个有效的

258
00:07:49.010 --> 00:07:50.990
[en]
[zh]保存它，现在您有一个有效的
交互式<00:04:06.179>反应 <00:04:06.479>应用<00:04:06.779>程序<00:04:07.079>非常<00:04:07.379>酷<00:04:07.679>，

259
00:07:50.990 --> 00:07:52.670
[en]
[zh]交互式反应 应用程序非常酷，

260
00:07:52.670 --> 00:07:54.230
[en]
[zh]交互式反应 应用程序非常酷，
但<00:04:08.220>我们<00:04:08.520>想<00:04:08.820>确保 <00:04:09.120>AI

261
00:07:54.230 --> 00:07:56.150
[en]
[zh]但我们想确保 AI

262
00:07:56.150 --> 00:07:57.950
[en]
[zh]但我们想确保 AI
将来<00:04:09.548>不<00:04:09.736>会<00:04:09.924>意外<00:04:10.112>破坏<00:04:10.300>此<00:04:10.488>代码<00:04:10.676>，

263
00:07:57.950 --> 00:07:59.629
[en]
[zh]将来不会意外破坏此代码，

264
00:07:59.629 --> 00:08:01.969
[en]
[zh]将来不会意外破坏此代码，
所以<00:04:11.235>让<00:04:11.610>我们<00:04:11.985>让<00:04:12.360>它

265
00:08:01.969 --> 00:08:04.550
[en]
[zh]所以让我们让它

266
00:08:04.550 --> 00:08:06.350
[en]
[zh]所以让我们让它
与 <00:04:12.797>playwright <00:04:13.054>一起<00:04:13.311>编写<00:04:13.568>测试<00:04:13.825>，<00:04:14.082>再次<00:04:14.339>复制

267
00:08:06.350 --> 00:08:08.150
[en]
[zh]与 playwright 一起编写测试，再次复制

268
00:08:08.150 --> 00:08:09.650
[en]
[zh]与 playwright 一起编写测试，再次复制
代码<00:04:14.789>，<00:04:15.119>然后<00:04:15.449>进入<00:04:15.779>测试<00:04:16.109>目录<00:04:16.439>并

269
00:08:09.650 --> 00:08:11.809
[en]
[zh]代码，然后进入测试目录并

270
00:08:11.809 --> 00:08:12.830
[en]
[zh]代码，然后进入测试目录并
创建<00:04:17.024>一<00:04:17.249>个<00:04:17.474>名为<00:04:17.699>的<00:04:17.924>新<00:04:18.149>文件 <00:04:18.374>app.test.ts

271
00:08:12.830 --> 00:08:15.409
[en]
[zh]创建一个名为的新文件 app.test.ts

272
00:08:15.409 --> 00:08:17.629
[en]
[zh]创建一个名为的新文件 app.test.ts
这<00:04:19.602>是<00:04:19.824>打印<00:04:20.046>工程师<00:04:20.268>的<00:04:20.490>专业<00:04:20.712>提示<00:04:20.934>，

273
00:08:17.629 --> 00:08:19.490
[en]
[zh]这是打印工程师的专业提示，

274
00:08:19.490 --> 00:08:22.249
[en]
[zh]这是打印工程师的专业提示，
您<00:04:21.624>可以<00:04:21.889>使用<00:04:22.154>键盘<00:04:22.419>上<00:04:22.684>的 <00:04:22.949>control <00:04:23.214>V

275
00:08:22.249 --> 00:08:24.290
[en]
[zh]您可以使用键盘上的 control V

276
00:08:24.290 --> 00:08:25.969
[en]
[zh]您可以使用键盘上的 control V
而<00:04:23.749>不<00:04:24.038>是<00:04:24.327>右键<00:04:24.616>单击<00:04:24.905>粘贴<00:04:25.194>来

277
00:08:25.969 --> 00:08:28.129
[en]
[zh]而不是右键单击粘贴来

278
00:08:28.129 --> 00:08:29.570
[en]
[zh]而不是右键单击粘贴来
最大<00:04:25.762>化<00:04:25.964>您<00:04:26.166>的<00:04:26.368>速度<00:04:26.570>现在<00:04:26.772>从<00:04:26.974>那里<00:04:27.176>我们

279
00:08:29.570 --> 00:08:31.369
[en]
[zh]最大化您的速度现在从那里我们

280
00:08:31.369 --> 00:08:33.290
[en]
[zh]最大化您的速度现在从那里我们
需要<00:04:27.705>进入<00:04:28.050>包 <00:04:28.395>Json <00:04:28.740>文件

281
00:08:33.290 --> 00:08:34.790
[en]
[zh]需要进入包 Json 文件

282
00:08:34.790 --> 00:08:36.709
[en]
[zh]需要进入包 Json 文件
并<00:04:29.425>设置<00:04:29.690>测试<00:04:29.955>脚<00:04:30.220>本<00:04:30.485>，<00:04:30.750>如果 <00:04:31.015>您

283
00:08:36.709 --> 00:08:38.570
[en]
[zh]并设置测试脚本，如果 您

284
00:08:38.570 --> 00:08:40.010
[en]
[zh]并设置测试脚本，如果 您
已经<00:04:31.529>安装<00:04:31.919>了 <00:04:32.309>copilot，<00:04:32.699>您

285
00:08:40.010 --> 00:08:41.630
[en]
[zh]已经安装了 copilot，您

286
00:08:41.630 --> 00:08:43.550
[en]
[zh]已经安装了 copilot，您
只<00:04:32.930>需<00:04:33.101>键入<00:04:33.272>测试<00:04:33.443>，<00:04:33.614>它<00:04:33.785>应该<00:04:33.956>会

287
00:08:43.550 --> 00:08:44.870
[en]
[zh]只需键入测试，它应该会

288
00:08:44.870 --> 00:08:46.670
[en]
[zh]只需键入测试，它应该会
自动<00:04:34.454>检测 <00:04:34.769>playwright <00:04:35.084>并<00:04:35.399>为

289
00:08:46.670 --> 00:08:49.820
[en]
[zh]自动检测 playwright 并为

